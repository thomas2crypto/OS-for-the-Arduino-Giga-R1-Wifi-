//This file is all the Command logic


class SerialCommander {
public:
  // Commander Version
  float com_ver = 0.2;
  void begin(unsigned long baud, float com_verValue) {
    com_ver = com_verValue;
    Serial.begin(baud);
  }

  void update() {
    readSerialData();

    if (serialIndex > 0 && serialIn[serialIndex - 1] == '\n') {
      serialIn[serialIndex - 1] = '\0';
      receivedMessage = String(serialIn);
      serialIndex = 0;
      processMessage(receivedMessage);
    }
  }

private:
  static const int BUFFER_SIZE = 200;
  static const int MAX_ITEMS = 200;
  char serialIn[BUFFER_SIZE];
  int serialIndex = 0;
  String receivedMessage;
  String keys[MAX_ITEMS];
  String values[MAX_ITEMS];
  bool echoEnabled = false;

  void readSerialData() {
    while (Serial.available() > 0) {
      char c = Serial.read();
      if (serialIndex < BUFFER_SIZE - 1) {
        serialIn[serialIndex++] = c;
      } else {
        serialIndex = 0;
        Serial.println("Pufferüberlauf!");
      }
    }
  }

  void processMessage(String message) {
    message.trim();
    message.toUpperCase();

    if (message.startsWith("SET ")) {  //Writes the Value to a Key
      int keyStart = 4;
      int keyEnd = message.indexOf(' ', keyStart);
      int valueStart = keyEnd + 1;

      if (keyEnd > 0 && valueStart < message.length()) {
        String key = message.substring(keyStart, keyEnd);
        String value = message.substring(valueStart);
        storeKeyValue(key, value);
      }

    } else if (message.startsWith("GET ")) {  //Reads a Value from a key
      String key = message.substring(4);
      getKeyValue(key);

    } else if (message.startsWith("PIN ON ")) {  //Turns the pin on
      int pin = message.substring(7).toInt();
      digitalWrite(pin, HIGH);
      Serial.print("Pin ");
      Serial.print(pin);
      Serial.println(" HIGH");

    } else if (message.startsWith("PIN OFF ")) {  //Turns the pin off
      int pin = message.substring(8).toInt();
      digitalWrite(pin, LOW);
      Serial.print("Pin ");
      Serial.print(pin);
      Serial.println(" LOW");

    } else if (message.startsWith("ANALOG ")) {
      int pinStart = 7;
      int pinEnd = message.indexOf(' ', pinStart);
      int valueStart = pinEnd + 1;

      if (pinEnd > 0 && valueStart < message.length()) {
        int pin = message.substring(pinStart, pinEnd).toInt();
        int value = message.substring(valueStart).toInt();

        if (value >= 0 && value <= 255) {
          analogWrite(pin, value);
          Serial.print("Analogwert ");
          Serial.print(value);
          Serial.print(" auf Pin ");
          Serial.print(pin);
          Serial.println(" geschrieben.");
        } else {
          Serial.println("Ungültiger Wert. Erlaubt: 0 - 255.");
        }
      } else {
        Serial.println("Syntaxfehler. Benutze: ANALOG <PIN> <WERT>");
      }
    } else if (message == "HELP") {  //Shows the Help
      printHelp();

    } else if (message.startsWith("REPEAT ")) {
      int spacePos = message.indexOf(' ', 7);
      int repeatCount = message.substring(7, spacePos).toInt();
      String text = message.substring(spacePos + 1);

      for (int i = 0; i < repeatCount; i++) {
        Serial.println(text);
      }
    } else if (message.startsWith("BLINK ")) {
      int pin = message.substring(7, 9).toInt();
      int duration = message.substring(10).toInt();
      digitalWrite(pin, HIGH);
      delay(duration);
      digitalWrite(pin, LOW);
      delay(duration);
      Serial.print("Pin ");
      Serial.print(pin);
      Serial.print(" blinkt für ");
      Serial.print(duration);
      Serial.println(" ms.");
    } else if (message.startsWith("TONE ")) {
      int firstSpace = message.indexOf(' ', 5);
      int secondSpace = message.indexOf(' ', firstSpace + 1);

      if (firstSpace > 0 && secondSpace > 0) {
        int pin = message.substring(5, firstSpace).toInt();
        int freq = message.substring(firstSpace + 1, secondSpace).toInt();
        int dur = message.substring(secondSpace + 1).toInt();
        playTone(pin, freq, dur);
      } else {
        Serial.println("Syntax: TONE <PIN> <FREQUENZ> <DAUER(ms)>");
      }
    } else if (message == "CLEAR") {  //"Clears" the Commandline, basicly it just prints a 100 empty lines
      for (int i = 0; i < 100; i++) {
        Serial.println("          ");
      }
    } else if (message == "VER") {  //"Clears" the Commandline, basicly it just prints a 100 empty lines
      Serial.println(com_ver);
    } else if (message.startsWith("ECHO")) {
      String string = message.substring(4);  // Reads the given String to print
      Serial.println(string);                // Prints the given String to the Console
    } else if (message.startsWith("I2C ")) {
      message.remove(0, 4);  // "I2C " abschneiden
      message.trim();
      int spaceIndex = message.indexOf(' ');
      if (spaceIndex == -1) {
        Serial.println("Fehlende Argumente.");
        return;
      }

      String addrStr = message.substring(0, spaceIndex);
      int addr = parseNumber(addrStr);
      message.remove(0, spaceIndex + 1);
      message.trim();

      bool isRead = message.startsWith("READ");
      bool isWrite = message.startsWith("WRITE");

      if (!isRead && !isWrite) {
        Serial.println("Unbekannter I2C-Befehl. Verwende READ oder WRITE.");
        return;
      }

      message.remove(0, isRead ? 4 : 5);
      message.trim();

      // Werte als Liste sammeln
      int params[32];
      int count = 0;
      while (message.length() > 0 && count < 32) {
        int nextSpace = message.indexOf(' ');
        String token;
        if (nextSpace == -1) {
          token = message;
          message = "";
        } else {
          token = message.substring(0, nextSpace);
          message.remove(0, nextSpace + 1);
        }
        params[count++] = parseNumber(token);
        message.trim();
      }

      if (isRead) {
        if (count == 0) {
          // Nur Adresse
          Wire.requestFrom(addr, 1);
        } else if (count == 1) {
          Wire.beginTransmission(addr);
          Wire.write(params[0]);
          Wire.endTransmission(false);
          Wire.requestFrom(addr, 1);
        } else {
          Wire.beginTransmission(addr);
          Wire.write(params[0]);  // Register
          Wire.endTransmission(false);
          Wire.requestFrom(addr, params[1]);
        }

        Serial.print("I2C READ 0x");
        Serial.print(addr, HEX);
        Serial.print(": ");
        while (Wire.available()) {
          int val = Wire.read();
          Serial.print("0x");
          if (val < 0x10) Serial.print("0");
          Serial.print(val, HEX);
          Serial.print(" ");
        }
        Serial.println();

      } else if (isWrite) {
        Wire.beginTransmission(addr);
        for (int i = 0; i < count; i++) {
          Wire.write(params[i]);
        }
        byte result = Wire.endTransmission();
        Serial.print("I2C WRITE 0x");
        Serial.print(addr, HEX);
        Serial.print(": ");
        if (result == 0) {
          Serial.println("OK");
        } else {
          Serial.print("Fehler (Code ");
          Serial.print(result);
          Serial.println(")");
        }
      }
    }  // <- Hier endet das "else if" für "I2C"
    else if (message == "LIST") {
      bool found = false;  // Flag, um zu prüfen, ob überhaupt Werte ausgegeben wurden
      for (int i = 0; i < MAX_ITEMS; i++) {
        if (keys[i] != "") {
          Serial.print(keys[i]);
          Serial.print("=");
          Serial.println(values[i]);
          found = true;
        }
      }

      if (!found) {
        Serial.println("Keine Daten verfügbar.");
      }
    } else {
      Serial.println("Unbekannter Befehl. Tippe 'HELP'.");
    }
  }

  void
  storeKeyValue(String key, String value) {
    for (int i = 0; i < MAX_ITEMS; i++) {
      if (keys[i] == key || keys[i] == "") {
        keys[i] = key;
        values[i] = value;
        Serial.print("Gespeichert: ");
        Serial.print(key);
        Serial.print(" = ");
        Serial.println(value);
        return;
      }
    }
    Serial.println("Kiste voll! Kein Platz mehr.");
  }

  void getKeyValue(String key) {
    for (int i = 0; i < MAX_ITEMS; i++) {
      if (keys[i] == key) {
        Serial.print(key);
        Serial.print(" = ");
        Serial.println(values[i]);
        return;
      }
    }
    Serial.println("Schlüssel nicht gefunden.");
  }

  void printHelp() {
    Serial.println(F("Verfügbare Befehle:"));
    Serial.println(F("  HELP                                 - Zeigt diese Hilfe an"));
    Serial.println(F("  VER                                  - Zeigt die Systemversion an"));
    Serial.println(F("  SET <KEY> <VALUE>                    - Speichert Daten"));
    Serial.println(F("  GET <KEY>                            - Liest Daten"));
    Serial.println(F("  LIST                                 - Listet alle gespeicherten Daten"));
    Serial.println(F("  PIN ON/OFF <NUMMER>                  - Schaltet Pin an/aus"));
    Serial.println(F("  ANALOG <PIN> <WERT>                  - Setzt PWM-Wert (0-255) auf einem Pin"));
    Serial.println(F("  TOGGLE PIN <NUMMER>                  - Schaltet Pin um (HIGH/LOW)"));
    Serial.println(F("  ECHO <String>                        - Gibt die Eingabe zurück"));
    Serial.println(F("  SET TIME <STUNDE> <MINUTE> <SEKUNDE> - Setzt die Uhrzeit"));
    Serial.println(F("  REPEAT <ZAHL> <TEXT>                 - Wiederholt den Text eine bestimmte Anzahl von Malen"));
    Serial.println(F("  CLEAR                                - Löscht die Kommandozeile"));
    Serial.println(F("  BANNER                               - Zeigt Banner wie in MSF"));
    Serial.println(F("  I2C SCAN                             - Scannt den I2C-Bus nach Geräten"));
    Serial.println(F("  I2C READ <ADDR> <REG> <LEN>          - Liest <LEN> Bytes vom Gerät @ADDR ab REG"));
    Serial.println(F("  I2C WRITE <ADDR> <VAL...>            - Sendet 1 oder mehr Werte an I2C-Adresse"));
    Serial.println(F("  TONE <PIN> <FREQUENZ> <DAUER(ms)>    - Spielt Ton auf Pin ab"));
  }

  void banner() {
    int bannernum = random(1, 10);
    if (bannernum == 0) {  //METASPLOIT
      Serial.println(F("   __  ___      __         ____        _ __              "));
      Serial.println(F("  /  |/  /___  / /_  ___  / __ \\__  __(_) /____         "));
      Serial.println(F(" / /|_/ / __ \\/ __ \\/ _ \\/ / / / / / / / __/ _ \\     "));
      Serial.println(F("/ /  / / /_/ / / / /  __/ /_/ / /_/ / / /_/  __/         "));
      Serial.println(F("/_/  /_/\\____/_/ /_/\\___/_____/\\__,_/_/\\__/\\___/    "));
      Serial.println(F("             [Exploit * Persist * Prevail]               "));
    } else if (bannernum == 1) {  //0xPwned
      Serial.println(F("   ____   __  __     ____                 _              "));
      Serial.println(F("  / __ \\ / /_/ /_   / __ \\____  ___  ____(_)___        "));
      Serial.println(F(" / /_/ // __/ __/  / /_/ / __ \\/ _ \\/ __/ / __ \\      "));
      Serial.println(F("/ ____// /_/ /_   / ____/ /_/ /  __/ /_/ / /_/ /         "));
      Serial.println(F("\\/     \\__/\\__/  /_/    \\____/\\___/\\__/_/ .___/    "));
      Serial.println(F("                                      /_/                "));
      Serial.println(F("           >>> SYSTEM BREACH INITIATED <<<               "));
    } else if (bannernum == 2) {  //R00T.EXE
      Serial.println(F("    ____             __   ______                         "));
      Serial.println(F("   / __ \\____ ______/ /__/ ____/___ ___  ___            "));
      Serial.println(F("  / /_/ / __ `/ ___/ //_/ /   / __ `__ \\/ _ \\          "));
      Serial.println(F(" / ____/ /_/ / /__/ ,< / /___/ / / / / /  __/            "));
      Serial.println(F("/_/    \\__,_/\\___/_/|_|\\____/_/ /_/ /_/\\___/         "));
      Serial.println(F("   [Accessing Kernel Layer... Granted]                   "));
    } else if (bannernum == 3) {  //
      Serial.println(F("   _____       __   ______     __                        "));
      Serial.println(F("  / ___/____  / /__/ ____/__  / /__ ___                  "));
      Serial.println(F("  \\__ \\/ __ \\/ //_/ / __/ _ \\/ / -_) _ \\            "));
      Serial.println(F(" ___/ / /_/ / ,< / /_/ /  __/ /\\__/_//_/                "));
      Serial.println(F("/____/ .___/_/|_|\\____/\\___/_/                         "));
      Serial.println(F("    /_/  INFILTRATION SUCCESSFUL                         "));
    } else if (bannernum == 6) {  //
      Serial.println(F("   ________        __       __    __                     "));
      Serial.println(F("  / ____/ /_____  / /______/ /___/ /__  _____            "));
      Serial.println(F(" / /   / __/ __ \\/ __/ ___/ / __  / _ \\/ ___/          "));
      Serial.println(F("/ /___/ /_/ /_/ / /_/ /__/ / /_/ /  __/ /                "));
      Serial.println(F("\\____/\\__/\\____/\\__/\\___/_/\\__,_/\\___/_/          "));
      Serial.println(F("         * [Session Active] *                            "));
    } else if (bannernum == 7) {  //
      Serial.println(F("  ________  ____  ___   ______      __                   "));
      Serial.println(F(" / ____/ / / /  |/  /  / ____/___  / /__ ___             "));
      Serial.println(F("/ / __/ /_/ / /|_/ /  / / __/ __ \\/ / -_) _ \\          "));
      Serial.println(F("/ /_/ / __  / /  / /  / /_/ / /_/ / /\\__/_//_/          "));
      Serial.println(F("\\_____/_/ /_/_/  /_/   \\____/\\____/_/                 "));
      Serial.println(F("      [Payload Injected — Awaiting Trigger]              "));
    } else if (bannernum == 8) {  //
      Serial.println(F("  _    _            _   __  __           _               "));
      Serial.println(F(" | |  | |          | | |  \\/  |         | |             "));
      Serial.println(F(" | |__| | __ _  ___| |_| \\  / | ___   __| |___          "));
      Serial.println(F(" |  __  |/ _` |/ __| __| |\\/| |/ _ \\ / _` / __|        "));
      Serial.println(F(" | |  | | (_| | (__| |_| |  | | (_) | (_| \\__ \\        "));
      Serial.println(F(" |_|  |_|\\__,_|\\___|\\__|_|  |_|\\___/ \\__,_|___/     "));
      Serial.println(F("       INITIATING DEEP SYSTEM SCAN...                    "));
    } else if (bannernum == 9) {  //
      Serial.println(F("   _____ _                 __        __                  "));
      Serial.println(F("  / ___/(_)___  ____ ___  / /_____ _/ /_____  _____      "));
      Serial.println(F("  \\__ \\ / / __ \\/ __ `__ \\/ __/ __ `/ __/ __ \\/ ___/"));
      Serial.println(F(" ___/ / / / / / / / / / / /_/ /_/ / /_/ /_/ / /          "));
      Serial.println(F("/____/_/_/ /_/_/ /_/ /_/\\__/\\__,_/\\__/\\____/_/       "));
      Serial.println(F("      >>> NO BARRIERS DETECTED. ADVANCE. <<<             "));
    } else if (bannernum == 10) {  //
      Serial.println(F("   _____            _     _      _                       "));
      Serial.println(F("  / ____|          | |   (_)    | |                      "));
      Serial.println(F(" | (___   ___  _ __| |_   _  ___| | ___  ___             "));
      Serial.println(F("  \\___ \\ / _ \\| '__| __| | |/ _ \\ |/ _ \\/ __|       "));
      Serial.println(F("  ____) | (_) | |  | |_  | |  __/ |  __/\\__ \\          "));
      Serial.println(F(" |_____/ \\___/|_|   \\__| |_|\\___|_|\\___||___/        "));
      Serial.println(F("         [SESSION #31337: CONNECTED]                     "));
    }
  }
  int parseNumber(String str) {
    return str.toInt();  // Konvertiert den String in eine Ganzzahl
  }
  void playTone(int pin, int frequency, int duration) {
    tone(pin, frequency, duration);
    delay(duration);  // Warten, bis der Ton gespielt ist
    noTone(pin);      // Ton stoppen
    Serial.print("Ton gespielt auf Pin ");
    Serial.print(pin);
    Serial.print(", Frequenz: ");
    Serial.print(frequency);
    Serial.print(" Hz, Dauer: ");
    Serial.print(duration);
    Serial.println(" ms");
  }
};
